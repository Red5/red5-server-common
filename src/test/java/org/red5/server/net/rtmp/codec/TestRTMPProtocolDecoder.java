package org.red5.server.net.rtmp.codec;

import java.util.List;

import org.apache.mina.core.buffer.IoBuffer;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.red5.io.utils.IOUtils;
import org.red5.server.net.protocol.RTMPDecodeState;
import org.red5.server.net.rtmp.RTMPConnection;
import org.red5.server.net.rtmp.RTMPMinaConnection;
import org.red5.server.net.rtmp.message.Packet;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestRTMPProtocolDecoder {

    protected Logger log = LoggerFactory.getLogger(TestRTMPProtocolDecoder.class);

    @Before
    public void setUp() throws Exception {
    }

    @After
    public void tearDown() throws Exception {
    }

    @Test
    public void testDecodeBuffer() {
        log.debug("\ntestDecodeBuffer");
        RTMPConnection conn = new RTMPMinaConnection();
        conn.getState().setState(RTMP.STATE_CONNECTED);
        IoBuffer p00 = IoBuffer.wrap(IOUtils.hexStringToByteArray("0883edee5e09a956c8c9a28fc0191e8aac8eb057a0c1d5aadce651bb1b2b8fda261db8917d1990efd18970a9f278e5692995fa486592a0204fd3b126bd9931cf9567af31803fa39ff9530cece5189d998104ca525c656d7b696a36d7bb9c79136c26009ea9822ac4c49a65060464c51890a84f6f8b0ef5b787ea204d6c4b9f141d54dd226499ef3876f38982965027bcb90244aadf71ac0c0e848277fe49500f47b2a254d4538ecd142c892478568e59817bd47892b90d17397738e1ef880aec26fe586b90e946a3ee06a24158f98c828ff9a8ff29a15cdf6356e6a65da9a0afe34ec1ef19ef9cbf7bc380888a6d7da3fa1f3e97f6ae731dbb1c9d81d40b0c937bfae97b2b30599b1311734b3d04477c08433f00dd42d68619897e3ad0c7b8dd2f9a4ec19df306ea79bdd3df23c798111d059e81160c13ac3fff38a5c90677232094d1a8df31a5c35b446027000066f3a31c8609eac4b5a5a9885e23255a04d039609546782ad73f3fcf10edc611420f43f8d4f2a6acef917ae41b56d76ce3b21ae7f12bb8251ab3ada76910d8fa2cd7a779260ca3b61cb7a6c17b0b76cd656de7c0bda0f53db65f9f8a735e624b6367ac63bb6b5f521086810a0c06c944380dcd07bfa3917e4e207c7f28f536be173f1a49bf841a43ab6ce2143795dcf27f4a8a260e406268008c35f66c9f2df680b948a0bb39b5c7f2774f46bd761bf7c4a00139184f3dfdba2ec76a6a179383bebf720a9687fd8a67e173b8cea4df512a5773ecf45aa5eb10abb4bb078d96dd869e5588d91314d3f926bd5aaa23a924da66a72037ffbf31a9436af2be49cc49ac5dea25ee2fada19eb34ec8eea93c9f648b33fdf416ddec1b29ebf588880a28eea946c9f229d9b0ac06b2006a9bd04c92f274075d86e89d82298f2d0d9dca936415e453e799d2f9faa68279837ebd89e04634674e44e67b0e1f21f42d471959d8a4614eb414a69e1c44420c030edb3a52781c346b47141203ccd134e8921cb4b2d2cbc6df2203df3add850ded17f7126e06e7ee053e467ee659c0008002b31d99048d9ba70d7b69d1bf5130025c8c34c47d0e73da818373b8894022c8f2d510fb78211b077acb595a74d7d2d7eb2ce37cc28cae46650cc5c0958356d6948708204c9daa3a0e3aedd2a42138b93393a3ed55ea7d055f26a5119db2264e8a0ae33732575f58d8023f9317ab03c3619d0d35b57703a11b88b75b301e1e759b0196de898d50771e4327ed9ffb8a02db7c47b9f20af790fd8225c9e7ef0e982e0d395e9b0487c17d5caeb421f3cab2e5d09a43581d9ebd6f390e5c7dccb7e1f2e9f1652dd925d60e870a75d954045fe5f6e4915ac152659b352b4bc94bde6ed915d6ea04c04753238444ff34f6a7d7233e07b7212cb3d8c33e2b30a82b1feafd8f95e9a942f8fd650508c610a592ffa3a3daa5a567c9738dcb72830b76b233387bdf97cd9e3cbf3e5ca5408d2c9daf7fbeb6384172a8891685e3021c1b0fd780c0ca296d18d06087d2abd7af98f13181bffd1a3506fe3cc2ac01f613da1e0466a28f6163f56acfbb8859527dc37a5305950204a8f8976dc3599c401ce600ee743faa6edbd20fc9203d6cc2cd74d23063a1b28fb69b46e6117e63b09a2114a032bbea579606ecd07da4b7dcce398cf75d86e4e75f0f8e4857091a02409cf5151777773e12f86bca59d423e50f0944240458738b9c8ed3b8c29cb710427ceb52a928f92603592c5f0b966ed30beb380363718b93fff23533a23e6cb9ef2075e2304286a8dc4a7277e3e374c4111e63a8aad046ad26747d7c97d6aacc9fd4fa466ae32106932904a1ec5f7697d766bc0d812fa329659570ebbbfabbbd5933fc29458ed48319f64f395509bb907f26c64f24d38eae615be849e025574f9666cff907cee097221399082215260ee6c9f48e1e63600228902f3e4659c5cd00fd8dbb967232f52b4010c470a2f3ec374fcf5a5c29ace268395126ee17afab20c9e90436db09a7ba15514717cbd0e2c0bdd6e0fd34477bd59102372b69871ebd461de3d4c4d430252207a49bf4e2a7934691f4c1b10360ba33a6168d3e47592b9191b84a3eadf49216c8fb71e37f1148d5479baa929c7a13cce2d6604bd310349442fb3e05dd0fae14019c3852f910863ae96be49761b9470300000000014d1400000000020007636f6e6e656374003ff0000000000000030003617070020003766f640008666c61736856657202000e4c4e582032302c302c302c323836000673776655726c020036687474703a2f2f6c6f63616c686f73743a353038302f766f642f6d696e69706c617965722e7377662f5b5b44594e414d49435d5d2f320005746355c3726c02001972746d703a2f2f6c6f63616c686f73743a313933352f766f640004667061640100000c6361706162696c697469657300406de00000000000000b617564696f436f646563730040abee0000000000000b766964656f436f6465637300406f800000000000000d766964656f46756e6374696f6e003ff00000000000c30000077061676555726c020024687474703a2f2f6c6f63616c686f73743a353038302f766f642f696e6465782e68746d6c000e6f626a656374456e636f64696e67004008000000000000000009"));

        RTMPProtocolDecoder dec = new RTMPProtocolDecoder();
        List<Object> objs = dec.decodeBuffer(conn, p00);
        log.debug("Objects #19: {}", objs);
    }

    @Test
    public void testDecodePacket() {
        log.debug("\ntestDecodePacket");
        RTMPConnection conn = new RTMPMinaConnection();
        RTMPDecodeState state = new RTMPDecodeState("junit");
        
        // connect is first, last one crashes decode
        IoBuffer p0 = IoBuffer.wrap(IOUtils.hexStringToByteArray("030000000001321400000000020007636f6e6e656374003ff00000000000000300036170700200086f666c6144656d6f0008666c61736856657202000e4c4e582032302c302c302c323836000673776655726c020029687474703a2f2f6c6f63616c686f73743a353038302f64656d6f732f6f666c615f64656d6f2e7377660005746355726c02001972746dc3703a2f2f6c6f63616c686f73742f6f666c6144656d6f0004667061640100000c6361706162696c697469657300406de00000000000000b617564696f436f646563730040abee0000000000000b766964656f436f6465637300406f800000000000000d766964656f46756e6374696f6e003ff000000000000000077061676555c3726c02002a687474703a2f2f6c6f63616c686f73743a353038302f64656d6f732f6f666c615f64656d6f2e68746d6c000009"));
        IoBuffer p1 = IoBuffer.wrap(IOUtils.hexStringToByteArray("c3703a2f2f6c6f63616c686f73742f6f666c6144656d6f0004667061640100000c6361706162696c697469657300406de00000000000000b617564696f436f646563730040abee0000000000000b766964656f436f6465637300406f800000000000000d766964656f46756e6374696f6e003ff000000000000000077061676555c3726c02002a687474703a2f2f6c6f63616c686f73743a353038302f64656d6f732f6f666c615f64656d6f2e68746d6c000009"));
        IoBuffer p2 = IoBuffer.wrap(IOUtils.hexStringToByteArray("c3726c02002a687474703a2f2f6c6f63616c686f73743a353038302f64656d6f732f6f666c615f64656d6f2e68746d6c000009"));
        IoBuffer p3 = IoBuffer.wrap(IOUtils.hexStringToByteArray("02ff1d00000004050000000000989680"));
        IoBuffer p4 = IoBuffer.wrap(IOUtils.hexStringToByteArray("0300016400002f140000000002002264656d6f536572766963652e6765744c6973744f66417661696c61626c65464c567300400000000000000005"));
        IoBuffer p5 = IoBuffer.wrap(IOUtils.hexStringToByteArray("4300058d0000191402000c63726561746553747265616d00400800000000000005"));
        IoBuffer p6 = IoBuffer.wrap(IOUtils.hexStringToByteArray("4200000000000a0400030000000000001388"));
        IoBuffer p7 = IoBuffer.wrap(IOUtils.hexStringToByteArray("080006f100001d1401000000020004706c61790000000000000000000502000973706565782e666c76c200030000000100001388"));
        IoBuffer p8 = IoBuffer.wrap(IOUtils.hexStringToByteArray("c200030000000100001388"));
        IoBuffer p9 = IoBuffer.wrap(IOUtils.hexStringToByteArray("42000000000006040007af055b23"));
        IoBuffer p10 = IoBuffer.wrap(IOUtils.hexStringToByteArray("c20007af056302"));
        IoBuffer p11 = IoBuffer.wrap(IOUtils.hexStringToByteArray("c20007af056ac2"));
        IoBuffer p12 = IoBuffer.wrap(IOUtils.hexStringToByteArray("c20007af05728a"));
        IoBuffer p13 = IoBuffer.wrap(IOUtils.hexStringToByteArray("c20007af057a67"));
        IoBuffer p14 = IoBuffer.wrap(IOUtils.hexStringToByteArray("480029400000181402000b636c6f736553747265616d00000000000000000005"));
        IoBuffer p15 = IoBuffer.wrap(IOUtils.hexStringToByteArray("4200000000000a04000300000000000013888300296102000c63726561746553747265616d00401000000000000005430000000000221402000c64656c657465"));
        IoBuffer p16 = IoBuffer.wrap(IOUtils.hexStringToByteArray("8300296102000c63726561746553747265616d00401000000000000005430000000000221402000c64656c657465"));
        IoBuffer p17 = IoBuffer.wrap(IOUtils.hexStringToByteArray("430000000000221402000c64656c657465"));
        IoBuffer p18 = IoBuffer.wrap(IOUtils.hexStringToByteArray("888300296102000c63726561746553747265616d00401000000000000005430000000000221402000c64656c657465"));
        
        RTMPProtocolDecoder dec = new RTMPProtocolDecoder();
        Packet pkt = dec.decodePacket(conn, state, p0);
        log.debug("Packet #1: {} state: {}", pkt, state);
        pkt = dec.decodePacket(conn, state, p1);
        log.debug("Packet #2: {} state: {}", pkt, state);
    }

    @Test
    public void testDecodeHeader() {
        log.debug("Not yet implemented");
    }

    @Test
    public void testDecodeMessage() {
        log.debug("Not yet implemented");
    }

    @Test
    public void testDecodeInvoke() {
        log.debug("Not yet implemented");
    }

}
